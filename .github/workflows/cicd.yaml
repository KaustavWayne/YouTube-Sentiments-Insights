name: CICD Pipeline (DagsHub + Hugging Face)

on: push

jobs:
  model-deployment:
    runs-on: ubuntu-latest

    env:
      DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
      DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      HF_USERNAME: ${{ secrets.HF_USERNAME }}

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3Ô∏è‚É£ Cache pip dependencies for faster builds
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # 5Ô∏è‚É£ Configure DagsHub DVC remote
      - name: Configure DagsHub DVC remote
        run: |
          dvc remote add -d origin https://dagshub.com/$DAGSHUB_USER/$DAGSHUB_REPO.dvc || true
          dvc remote modify origin --local auth basic
          dvc remote modify origin --local user $DAGSHUB_USER
          dvc remote modify origin --local password $DAGSHUB_PAT

      # 6Ô∏è‚É£ Run DVC pipeline
      - name: Run DVC pipeline
        run: |
          dvc repro

      # 7Ô∏è‚É£ Push DVC-tracked data to DagsHub
      - name: Push DVC-tracked data to DagsHub
        run: |
          dvc push

      # 8Ô∏è‚É£ Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 9Ô∏è‚É£ Commit & push changes if any
      - name: Commit and push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git add .
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      # üîü Install pytest
      - name: Install test dependencies
        run: |
          pip install pytest

      # 11Ô∏è‚É£ Model loading test
      - name: Run model loading test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          pytest scripts/test_load_model.py

      # 12Ô∏è‚É£ Model signature test
      - name: Run model signature test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          pytest scripts/test_model_signature.py

      # 13Ô∏è‚É£ Model performance test
      - name: Run model performance test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          pytest scripts/test_model_performance.py

      # 14Ô∏è‚É£ Promote model to production
      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python scripts/promote_model.py

      # 15Ô∏è‚É£ Start Flask App locally for testing
      - name: Start Flask App
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          nohup python flask_app/app.py &

      # 16Ô∏è‚É£ Run Flask API tests
      - name: Start Flask App and run API tests
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          echo "Starting Flask app on port 7860..."
          nohup python flask_app/app.py > flask.log 2>&1 &
          sleep 10
          echo "Checking Flask app health..."
          curl -I http://127.0.0.1:7860 || (echo "‚ùå Flask app failed to start!" && cat flask.log && exit 1)
          echo "‚úÖ Flask app is running. Starting tests..."
          pytest scripts/test_flask_api.py --maxfail=1 --disable-warnings -q

      # 17Ô∏è‚É£ Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # 18Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t kaustavwayne/youtube-chrome-plugin .

      # 19Ô∏è‚É£ Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag kaustavwayne/youtube-chrome-plugin kaustavwayne/youtube-chrome-plugin:latest

      # 20Ô∏è‚É£ Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push kaustavwayne/youtube-chrome-plugin:latest

      # 21Ô∏è‚É£ üöÄ Deploy Flask Docker App to Hugging Face Spaces (No Gunicorn)
      - name: Deploy Flask App to Hugging Face
        if: success()
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          echo "üîê Logging into Hugging Face..."
          pip install --upgrade huggingface_hub

          python - <<'EOF'
          from huggingface_hub import HfApi
          import os

          HF_USERNAME = os.environ["HF_USERNAME"]
          HF_TOKEN = os.environ["HF_TOKEN"]
          DOCKER_USERNAME = os.environ["DOCKER_USERNAME"]
          DAGSHUB_PAT = os.environ["DAGSHUB_PAT"]
          repo_name = "youtube-chrome-plugin"

          api = HfApi()
          print("üöÄ Creating or updating Hugging Face Space...")
          api.create_repo(
              repo_id=f"{HF_USERNAME}/{repo_name}",
              repo_type="space",
              space_sdk="docker",
              exist_ok=True,
              token=HF_TOKEN
          )

          print("üì¶ Preparing Dockerfile for Hugging Face Space...")
          dockerfile_content = (
              f"FROM {DOCKER_USERNAME}/youtube-chrome-plugin:latest\n"
              f"\n"
              f"# Inject DAGSHUB_PAT for data access\n"
              f"ENV DAGSHUB_PAT={DAGSHUB_PAT}\n"
              f"\n"
              f"# Ensure NLTK stopwords & wordnet are available\n"
              f"ENV NLTK_DATA=/usr/local/share/nltk_data\n"
              f"RUN python -m nltk.downloader stopwords wordnet -d /usr/local/share/nltk_data\n"
              f"\n"
              f"# Expose port expected by HF Spaces\n"
              f"EXPOSE 7860\n"
              f"\n"
              f"# Start Flask app normally\n"
              f'CMD ["python", "flask_app/app.py"]\n'
          )

          api.upload_file(
              path_or_fileobj=dockerfile_content.encode("utf-8"),
              path_in_repo="Dockerfile",
              repo_id=f"{HF_USERNAME}/{repo_name}",
              repo_type="space",
              token=HF_TOKEN
          )

          print("‚úÖ Dockerfile uploaded successfully to Hugging Face Space!")
          EOF
