name: CICD Pipeline (DagsHub)

on: push

jobs:
  model-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure DagsHub DVC remote
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          dvc remote add -d origin https://dagshub.com/$DAGSHUB_USER/$DAGSHUB_REPO.dvc || true
          dvc remote modify origin --local auth basic
          dvc remote modify origin --local user $DAGSHUB_USER
          dvc remote modify origin --local password $DAGSHUB_PAT

      - name: Run DVC pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro

      - name: Push DVC-tracked data to DagsHub
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc push

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Install test dependencies
        run: |
          pip install pytest

      - name: Run model loading test
        run: |
          pytest scripts/test_load_model.py

      - name: Run model signature test
        run: |
          pytest scripts/test_model_signature.py

      - name: Run model performance test
        run: |
          pytest scripts/test_model_performance.py

      - name: Promote model to production
        if: success()
        run: python scripts/promote_model.py

      - name: Start Flask App
        run: |
          nohup python flask_app/app.py &

      - name: Run Flask API tests
        run: |
          pytest scripts/test_flask_api.py

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Build Docker image
        run: |
          docker build -t kaustavwayne/youtube-chrome-plugin .

      - name: Tag Docker image
        run: |
          docker tag kaustavwayne/youtube-chrome-plugin kaustavwayne/youtube-chrome-plugin:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push kaustavwayne/youtube-chrome-plugin:latest
