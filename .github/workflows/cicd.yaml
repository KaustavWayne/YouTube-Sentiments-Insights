name: CICD Pipeline (DagsHub)

on: push

jobs:
  model-deployment:
    runs-on: ubuntu-latest

    env:
      DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
      DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3Ô∏è‚É£ Cache pip dependencies for faster builds
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4Ô∏è‚É£ Install Python dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # 5Ô∏è‚É£ Configure DVC to connect with DagsHub remote storage
      - name: Configure DagsHub DVC remote
        run: |
          dvc remote add -d origin https://dagshub.com/$DAGSHUB_USER/$DAGSHUB_REPO.dvc || true
          dvc remote modify origin --local auth basic
          dvc remote modify origin --local user $DAGSHUB_USER
          dvc remote modify origin --local password $DAGSHUB_PAT

      # 6Ô∏è‚É£ Reproduce pipeline using DVC
      - name: Run DVC pipeline
        run: |
          dvc repro

      # 7Ô∏è‚É£ Push DVC-tracked data and models to DagsHub
      - name: Push DVC-tracked data to DagsHub
        run: |
          dvc push

      # 8Ô∏è‚É£ Configure Git for committing pipeline outputs
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 9Ô∏è‚É£ Commit and push updated files if any DVC outputs changed
      - name: Commit and push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git add .
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      # üîü Install pytest for running automated tests
      - name: Install test dependencies
        run: |
          pip install pytest

      # 11Ô∏è‚É£ Test 1 - Model loading validation
      - name: Run model loading test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          pytest scripts/test_load_model.py

      # 12Ô∏è‚É£ Test 2 - Model signature validation
      - name: Run model signature test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          pytest scripts/test_model_signature.py

      # 13Ô∏è‚É£ Test 3 - Model performance validation
      - name: Run model performance test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          pytest scripts/test_model_performance.py

      # 14Ô∏è‚É£ Promote model to production if all tests pass
      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python scripts/promote_model.py

      # 15Ô∏è‚É£ Start Flask application with DagsHub credentials
      - name: Start Flask App
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          nohup python flask_app/app.py &

      # 16Ô∏è‚É£ Run Flask API tests to verify deployment
      

      - name: Start Flask App and run API tests
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
          DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
          DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}
        run: |
          echo "Starting Flask app on port 7860..."
          nohup python flask_app/app.py > flask.log 2>&1 &

          echo "Waiting for Flask app to start..."
          sleep 10

          echo "Checking Flask app health..."
          curl -I http://127.0.0.1:7860 || (echo "‚ùå Flask app failed to start!" && cat flask.log && exit 1)

          echo "‚úÖ Flask app is running. Starting tests..."
          pytest scripts/test_flask_api.py --maxfail=1 --disable-warnings -q


      # 17Ô∏è‚É£ Log in to Docker Hub for container publishing
      - name: Log in to Docker Hub
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # 18Ô∏è‚É£ Build Docker image for the application
      - name: Build Docker image
        run: |
          docker build -t kaustavwayne/youtube-chrome-plugin .

      # 19Ô∏è‚É£ Tag the Docker image with latest
      - name: Tag Docker image
        run: |
          docker tag kaustavwayne/youtube-chrome-plugin kaustavwayne/youtube-chrome-plugin:latest

      # 20Ô∏è‚É£ Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push kaustavwayne/youtube-chrome-plugin:latest
